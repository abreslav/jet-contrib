$(document).ready(function() {

    var i = 'import java.util.*<br><br>namespace html {<br><br>  abstract class Factory<T> {<br>    abstract fun create() : T<br>  }<br><br>  abstract class Element<br><br>  class TextElement(val text : String) : Element<br><br>  abstract class Tag(val name : String) : Element {<br>    val children = ArrayList<Element>()<br>    val attributes = HashMap<String, String>()<br><br>    protected fun initTag<T : Element>(init : fun T.() : Unit) : T<br>      where class object T : Factory<T>{<br>      val tag = T.create()<br>      tag.init()<br>      children.add(tag)<br>      return tag<br>    }<br>  }<br><br>  abstract class TagWithText(name : String) : Tag(name) {<br>    fun String.plus() {<br>      children.add(TextElement(this))<br>    }<br>  }<br><br>  class HTML() : TagWithText("html") {<br>    class object : Factory<HTML> {<br>      override fun create() = HTML()<br>    }<br><br>    fun head(init : fun Head.() : Unit) = initTag<Head>(init)<br><br>    fun body(init : fun Body.() : Unit) = initTag<Body>(init)<br>  }<br><br>  class Head() : TagWithText("head") {<br>    class object : Factory<Head> {<br>      override fun create() = Head()<br>    }<br><br>    fun title(init : fun Title.() : Unit) = initTag<Title>(init)<br>  }<br><br>  class Title() : TagWithText("title")<br><br>  abstract class BodyTag(name : String) : TagWithText(name) {<br>  }<br><br>  class Body() : BodyTag("body") {<br>    class object : Factory<Body> {<br>      override fun create() = Body()<br>    }<br><br>    fun b(init : fun B.() : Unit) = initTag<B>(init)<br>    fun p(init : fun P.() : Unit) = initTag<P>(init)<br>    fun h1(init : fun H1.() : Unit) = initTag<H1>(init)<br>    fun a(href : String, init : fun A.() : Unit) {<br>      val a = initTag<A>(init)<br>      a.href = href<br>    }<br>  }<br><br>  class B() : BodyTag("b")<br>  class P() : BodyTag("p")<br>  class H1() : BodyTag("h1")<br>  class A() : BodyTag("a") {<br>    var href : String<br>      get() = attributes["href"]<br>      set(value) { attributes["href"] = value }<br>  }<br><br>  fun Map<String, String>.set(key : String, value : String) = this.put(key, value)<br><br>  fun html(init : fun HTML.() : Unit) : HTML {<br>    val html = HTML()<br>    html.init()<br>    return html<br>  }<br><br>}<br><br>namespace foo {<br><br>import html.*<br><br>fun result(args : Array<String>) =<br>  html {<br>    head {<br>      title {+"XML encoding with Groovy"}<br>    }<br>    body {<br>      h1 {+"XML encoding with Groovy"}<br>      p {+"this format can be used as an alternative markup to XML"}<br><br>      // an element with attributes and text content<br>      a(href = "http://groovy.codehaus.org") {+"Groovy"}<br><br>      // mixed content<br>      p {<br>        +"This is some"<br>        b {+"mixed"}<br>        +"text. For more see the"<br>        a(href = "http://groovy.codehaus.org") {+"Groovy"}<br>        +"project"<br>      }<br>      p {+"some text"}<br><br>      // content generated by<br>      p {<br>        for (arg in args)<br>          +arg<br>      }<br>    }<br>  }<br>}<br>';
    //var interval = setInterval(getHighlighting, 500);
    var interval;
    //var intervalCompletion = setInterval(getCompletion, 2000);
    var result = "";

    //setTimeout(stopAndSend, 60000)
    //var sendDataInterval = setInterval(sendDataToServer, 60000)
    var sendDataInterval;
    var start;

    function sendDataToServer() {
        $.ajax({
            url:document.location.href + "?stopTest=true",
            type:"POST",
            data:{text:result},
            success:onLoad
        });
        result = "";
    }

    function getHighlighting() {
        start = new Date().getTime();
        var url = document.location.href;
        //result += start + " ";
        url = url.replace("testConnection", "path=testUrl?sessionId=555&sendData=true");
        //$.post(url, {text:i}, onLoad);
        $.ajax({
            url:url + "?sendData=true&time=" + start,
            type:"POST",
            data:{text:i},
            complete:onLoad
        });
    }

    function getCompletion() {
        start = new Date().getTime();

        var url = document.location.href;
        url = url.replace("testConnection", "path=testUrl?sessionId=555&complete=true&cursorAt=27,15");
       // $.post(url, {text:i}, onLoad);
        $.ajax({
            url:url + "&time=" + start,
            type:"POST",
            data:{text:i},
            complete:onLoad
        });
    }

    function onLoad(request, data) {
        //alert(parseInt(request.getResponseHeader("time")))
        var a = (new Date().getTime() - parseInt(request.getResponseHeader("time")));
        //result += new Date().getTime() + " " + start + " " + a + "\n";
        result += a + "\n";
        document.getElementById("time").innerHTML = "" + a;
    }

    function stopAndSend() {
        clearInterval(interval);
        //clearInterval(intervalCompletion);
        //clearInterval(sendDataInterval);
        $.ajax({
            url:document.location.href + "?stopTest=true",
            type:"POST",
            data:{text:result},
            success:onLoad
        });
    }

    $('#stopH').click(stopAndSend);
    $('#startH').click(function() {
        interval = setInterval(getHighlighting, 500);
        //intervalCompletion = setInterval(getCompletion, 2000);
        //sendDataInterval = setInterval(sendDataToServer, 60000);
        result = "";
        setTimeout(stopAndSend, 600000);
    });
});